@using Microsoft.Extensions.Options
@model List<ParkAndRide.Models.App.ParkingExtensions>
@inject IOptions<GoogleApiConfig> apiConfig

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="c-content__list">
    <div class="c-container-7-10 u-center">
        <div class="c-content__list__elem c-content__list__elem--headerColor">
            <p class="c-content__list__column">Nazwa</p>
            <p class="c-content__list__column">Miejsce</p>
            <div class="c-content__list__column"></div>

        </div>
        <div class="c-content__list-scroll">
            @{int i = 0; }

            @foreach (var item in Model)
            {


                <div class="c-content__list__elem">
                    <p class="c-content__list__column">@item.Name</p>
                    <p class="c-content__list__column">@(String.Format("{0}, {1}", item.Place, item.Street))</p>
                    <button class="c-content__list__column c-button" button-marker="setMarker" id=@("button_" + i)>Pokaż na mapie</button>
                    <div class="c-triangle" id=@("triangle" + i)></div>
                </div>
                <div id=@("info" + i) class="c-content__list__info u-hidden">
                    <div class="c-content__list__wraper">
                        <div class="c-content__list__wraper__in">
                            <p>Adres:</p>
                            <p>@String.Format("{0} {1} {2}", item.Place, item.Street, item.Number)</p>
                        </div>
                        <div class="c-content__list__wraper__in">
                            <p>Kod Pocztowy:</p>
                            <p>@item.PostCode</p>
                        </div>
                        <div class="c-content__list__wraper__in">
                            <p>Data utworzenia:</p>
                            <p>@item.CreationDate</p>
                        </div>
                    </div>
                    <div class="c-content__list__wraper">
                        <div class="c-content__list__wraper__in">
                            <p>Liczba poziomów:</p>
                            <p>@item.NumberOfFloor</p>
                        </div>
                        <div class="c-content__list__wraper__in">
                            <p>Czy strzeżony?</p>
                            <p>
                                @if (item.Guarded == 1)
                                {
                                    String.Format("Tak");
                                }
                                else
                                {
                                    String.Format("Nie");

                                }
                            </p>
                        </div>
                        <div class="c-content__list__wraper__in">
                            <p>Liczba miejsc:</p>
                            <p>@item.NumberOfPlaces</p>
                        </div>
                    </div>
                    <a class="c-content__list__column c-button u-link" href=@String.Format("/Parking/Statistic/{0}", item.ParkingId)> Statystyki</a>
                </div>

                i++;

            }
            </div>

        </div>
        <button class="c-button u-center" button-marker="setAll">Pokaż wszystkie</button>
    
    </div>
<div id="map" class="map u-center"></div>


<script>
    var map;
    var addMarkerFunc;
    var mapLatitude;
    var mapLongitude;
    var markers = [];


    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 52.229, lng: 21.011 },
            zoom: 10
        });

    @foreach (var item in Model)
        {

        <text>
        var marker = createMarker({ gpsLat: @(item.GpsLat), gpsLng: @(item.GpsLng), Name: '@item.Name.ToString()' });
        markers.push({
            name: '@(item.Name)',
            marker: marker,
        });

        marker.setMap(map);


        </text>
        }      


    }

    function createMarker(obj) {
        var marker = new google.maps.Marker({
            position: { lat: obj.gpsLat, lng: obj.gpsLng },
        })

        var popUpMarker = new google.maps.InfoWindow({
            content: '<h2>' + obj.Name + '</h2>'
        });

        marker.addListener('click', function () {
            popUpMarker.open(map, marker);
        });

        return marker;
    }

    function createCircle(obj) {
        var circle = new google.maps.Circle({
            strokeColor: '#FF0000',
            strokeOpacity: 0.8,
            strokeWeight: 2,
            fillColor: '#FF0000',
            fillOpacity: 0.35,
            center: { lat: obj.gpsLat, lng: obj.gpsLng },
            radius: 1000
        });

        var popUpMarker = new google.maps.InfoWindow({
            content: '<h2>' + obj.Name + '</h2>'
        });

        circle.addListener('click', function () {
            popUpMarker.open(map, circle);
        });
  
        return circle;
    }
   

</script>
<script src="~/js/List.js"></script>
<script src="~/js/script.js"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=@(apiConfig.Value.GoogleApiKey)&callback=initMap&libraries=places"
        type="text/javascript"></script>



    }

